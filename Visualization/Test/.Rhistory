pdf(paste(file_name, "_graphs_", doan, ".pdf", sep = ""))
sink(paste(file_name, "_analytics_", doan, ".txt", sep = ""))
students <- nrow(dat)
# Introduction ---------------------------------------------------------------
# Titles the txt file with a test summary portion depicting number of
# questions and students
#
cat("Test Summary", "\n")
cat("----------------------------------------------", "\n")
cat("Analytics for", test_name, "\n")
cat("Questions = ", questions, "\n", sep = "")
cat("Students = ", students, "\n \n", sep = "")
# Overall Test Statistics ----------------------------------------------------
# Creates a histogram and boxplot of the overall test in the pdf file in
# addition to writing the 5-number summary in the txt file.
#
par(mfrow = c(1,2))
percentages <- as.numeric(unlist(dat[3])) / questions
hist(percentages, main = paste("Histogram of", test_name, sep = "\n"),
xlab = "Percentages")
abline(v = mean(percentages),col = "#FF0000")
statist <- c(summary(percentages), sd(percentages))
rows <- c("Min", "1st Quart.", "Median", "Mean", "3rd Quart.", "Max.",
"Standard Deviation")
cat("Histogram of", test_name, "Analytics", "\n")
for (analytics in 1:length(rows)) {
cat(rows[analytics], "=", statist[analytics], "\n")
}
cat("\n \n")
boxplot(percentages, main = paste("Boxplot of the scores for",
test_name, sep = "\n"))
# If there is only one student, then the qqnorm does not run because there
# is no histogram trend to compare to a distribution.
#
if (students != 1) {
# Q-Q Plot
par(mfrow = c(1,1))
qqnorm(percentages, cex = 0.5, xlab = "Normal Distribution",
ylab = "Test Quantiles")
abline(mean(percentages), sd(percentages))
legend('topleft', c(paste('Mean =', round(mean(percentages), 2)),
paste('SD =', round(sd(percentages), 2))),
text.col = c('black', 'red'), bty = 'n')
}
# Sectional Statistical Data -------------------------------------------------
# Makes a histogram and boxplot of all the sections in the pdf file.
# Records down the count of scores for the sections and states the questions
# the section overarches in the txt file.
#
cat("Section Summary", "\n")
cat("----------------------------------------------", "\n")
par(mfrow = c(3,4))
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (section in 1:sections) {
for (student in 1:students) {
section_scores[student, section] <-
sum(dat_numbers[student, range[1]:range[2]])
}
hist(section_scores[, section], col = c("#009999"), main =
paste("Histogram of", section_names[section], sep = "\n"),
xlab = paste("Scores of", section_names[section], sep = "\n"))
boxplot(section_scores[, section], main =
paste("Boxplot of", section_names[section], sep = "\n"))
cat("Scores of", section_names[section], "from lowest to highest:")
print(table(section_scores[, section]))
cat("Score calculated from questions ", range[1] - 3, " to ", range[2] - 2,
".\n", sep = "")
cat("Mean = ", mean(section_scores[, section]), "\n", sep = "")
if (students != 1) {
cat("Standard Deviation = ",
sd(section_scores[, section]), "\n \n", sep = "")
}
range[1] <- range[1] + section_count[section]
range[2] <- range[2] + section_count[section + 1]
}
# cat("\nSection Linear Correlation\n")
# cat("----------------------------------------------", "\n")
# if (sd(section_scores) != 0) {
#   print(cor(section_scores))
# }
# cat("\n")
# cat("The above table shows the linear correlation between all sections. \n")
# cat("Values near zero show there is no correlation, whereas values near one\n")
# cat("show there is a correlation between the two categorical scores.")
# cat("\n \n")
# Individual Question Visualization ------------------------------------------
# Creates a histogram for every question with the correct answer colored in as
# green and the others colored in as red. Also puts a frequency count of the
# responses of the students alongside the correct percentage and response
# answer in a txt file.
#
cat("\nIndividual Question Summary \n")
cat("----------------------------------------------", "\n")
cat("Key: The 1st row are the responses & the 2nd row are the counts.\n")
cat("     X = no responses, O = other from A-E and the correct answer.\n \n")
par(mfrow = c(3, 3))
entries <- 0
for (i in n.trials) {
# utf8ToInt("A") = 65, to get index 1, we subtract off 64
cols <- c("#FF0000", "#FF0000", "#FF0000", "#FF0000", "#FF0000",
"#FF0000", "#FF0000")
if (nchar(as.character(answers[1, i - 3])) > 1) {
index <- utf8ToInt(substr(as.character(answers[1, i - 3]), 0, 1)) - 64 + 1
cols <- append(cols, "#FF0000")
}  else {
index <- utf8ToInt(as.character(answers[1, i - 3])) - 64
}
cols[index] <- "#7CFC00"
qst_resp <- table(dat[i])
barplot(prop.table(qst_resp), main = paste("Question", i - 3, sep = " "),
col = cols, ylab = "Percentage")
cat("Count of answer responses for question ", i - 3, ":", sep = "")
print.table(qst_resp)
cat("The correct answer is ", toString(answers[1, i-3]), ".\n", sep = "")
cat("Percentage Correct: ", round(prop.table(qst_resp)[index] * 100,
digits = 2),"%.\n \n", sep = "")
new_entry <- data.frame(i - 3, prop.table(table(dat[i]))[index])
names(new_entry) <- c("Question", "% Correct")
entries <- rbind(entries, new_entry)
}
# Individual Question Summary Visualization ----------------------------------
# Plots the percentages correct of every question as a barplot and a plot.
#
par(mfrow = c(1,2))
entries2 <- entries
entries2[2] <- round(entries[2] * 10) / 10
barplot(table(entries2), main = "Barplot of Question \n Correct Percentages",
space = 0, col = "lightblue", xlab = "% Correct",
ylab = "Question Count")
summary(unlist(entries[2]))
plot(unlist(entries[1]), unlist(entries[2]), xlab = "Question Number",
ylab = "% Correct", main = "Plot of Question \n Correct Percentages")
# Closing files --------------------------------------------------------------
# Closes the files and saves with the inputted sinked txt and the plots in the
# pdf.
#
dev.off()
sink()
}
# National Analysis ------------------------------------------------------------
# Analyzes the test over all the students and scores.
#
dat_natl <- read.table(letters_entry, header = T, fill = TRUE)
dat_numbers_natl <- read.table(numbers_entry, header = T, fill = TRUE)
answers <- read.table(answers_entry, header = T, fill = TRUE)
students <- nrow(dat_natl)
questions <- ncol(answers)
test_analysis(dat_natl, dat_numbers_natl, "pt")
# E:\\Coding\\VEYM_benchmark_analytics_2019\\Visualization\\Test\\hsc1
setwd(readline("What is the output path of your file? "))
test_analysis(dat_natl, dat_numbers_natl, "pt")
# test_analysis function -------------------------------------------------------
# Makes a pdf of graphs depicting relation and analytics of the test for the
# given amount of students. In addition, a txt file is made with the analytics
# of the graphs such as 5-number summary, frequency of scores, etc.
#
test_analysis <- function(dat, dat_numbers, doan) {
# Filing ---------------------------------------------------------------------
# Sets the name and destination of the file for all data visualization and
# analytics. Also updates the number of students depending on which chapter/
# nation analyzing.
#
file_name <- paste(tolower(substring(test_name, 1, 2)), "c",
toString(sum(charToRaw(tolower(test_name)) == charToRaw('i'))),
sep = "")
pdf(paste(file_name, "_graphs_", doan, ".pdf", sep = ""))
sink(paste(file_name, "_analytics_", doan, ".txt", sep = ""))
students <- nrow(dat)
# Introduction ---------------------------------------------------------------
# Titles the txt file with a test summary portion depicting number of
# questions and students
#
cat("Test Summary", "\n")
cat("----------------------------------------------", "\n")
cat("Analytics for", test_name, "\n")
cat("Questions = ", questions, "\n", sep = "")
cat("Students = ", students, "\n \n", sep = "")
# Overall Test Statistics ----------------------------------------------------
# Creates a histogram and boxplot of the overall test in the pdf file in
# addition to writing the 5-number summary in the txt file.
#
par(mfrow = c(1,2))
percentages <- as.numeric(unlist(dat[3])) / questions
hist(percentages, main = paste("Histogram of", test_name, sep = "\n"),
xlab = "Percentages")
abline(v = mean(percentages),col = "#FF0000")
statist <- c(summary(percentages), sd(percentages))
rows <- c("Min", "1st Quart.", "Median", "Mean", "3rd Quart.", "Max.",
"Standard Deviation")
cat("Histogram of", test_name, "Analytics", "\n")
for (analytics in 1:length(rows)) {
cat(rows[analytics], "=", statist[analytics], "\n")
}
cat("\n \n")
boxplot(percentages, main = paste("Boxplot of the scores for",
test_name, sep = "\n"))
# If there is only one student, then the qqnorm does not run because there
# is no histogram trend to compare to a distribution.
#
if (students != 1) {
# Q-Q Plot
par(mfrow = c(1,1))
qqnorm(percentages, cex = 0.5, xlab = "Normal Distribution",
ylab = "Test Quantiles")
abline(mean(percentages), sd(percentages))
legend('topleft', c(paste('Mean =', round(mean(percentages), 2)),
paste('SD =', round(sd(percentages), 2))),
text.col = c('black', 'red'), bty = 'n')
}
# Sectional Statistical Data -------------------------------------------------
# Makes a histogram and boxplot of all the sections in the pdf file.
# Records down the count of scores for the sections and states the questions
# the section overarches in the txt file.
#
cat("Section Summary", "\n")
cat("----------------------------------------------", "\n")
par(mfrow = c(3,4))
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (section in 1:sections) {
for (student in 1:students) {
section_scores[student, section] <-
sum(dat_numbers[student, range[1]:range[2]])
}
hist(section_scores[, section], col = c("#009999"), main =
paste("Histogram of", section_names[section], sep = "\n"),
xlab = paste("Scores of", section_names[section], sep = "\n"))
boxplot(section_scores[, section], main =
paste("Boxplot of", section_names[section], sep = "\n"))
cat("Scores of", section_names[section], "from lowest to highest:")
print(table(section_scores[, section]))
cat("Score calculated from questions ", range[1] - 3, " to ", range[2] - 2,
".\n", sep = "")
cat("Mean = ", mean(section_scores[, section]), "\n", sep = "")
if (students != 1) {
cat("Standard Deviation = ",
sd(section_scores[, section]), "\n \n", sep = "")
}
range[1] <- range[1] + section_count[section]
range[2] <- range[2] + section_count[section + 1]
}
# cat("\nSection Linear Correlation\n")
# cat("----------------------------------------------", "\n")
# if (sd(section_scores) != 0) {
#   print(cor(section_scores))
# }
# cat("\n")
# cat("The above table shows the linear correlation between all sections. \n")
# cat("Values near zero show there is no correlation, whereas values near one\n")
# cat("show there is a correlation between the two categorical scores.")
# cat("\n \n")
# Individual Question Visualization ------------------------------------------
# Creates a histogram for every question with the correct answer colored in as
# green and the others colored in as red. Also puts a frequency count of the
# responses of the students alongside the correct percentage and response
# answer in a txt file.
#
cat("\nIndividual Question Summary \n")
cat("----------------------------------------------", "\n")
cat("Key: The 1st row are the responses & the 2nd row are the counts.\n")
cat("     X = no responses, O = other from A-E and the correct answer.\n \n")
par(mfrow = c(3, 3))
entries <- 0
for (i in n.trials) {
# utf8ToInt("A") = 65, to get index 1, we subtract off 64
cols <- c("#FF0000", "#FF0000", "#FF0000", "#FF0000", "#FF0000",
"#FF0000", "#FF0000")
if (nchar(as.character(answers[1, i - 3])) > 1) {
index <- utf8ToInt(substr(as.character(answers[1, i - 3]), 0, 1)) - 64 + 1
cols <- append(cols, "#FF0000")
}  else {
index <- utf8ToInt(as.character(answers[1, i - 3])) - 64
}
cols[index] <- "#7CFC00"
qst_resp <- table(dat[i])
barplot(prop.table(qst_resp), main = paste("Question", i - 3, sep = " "),
col = cols, ylab = "Percentage")
cat("Count of answer responses for question ", i - 3, ":", sep = "")
print.table(qst_resp)
cat("The correct answer is ", toString(answers[1, i-3]), ".\n", sep = "")
cat("Percentage Correct: ", round(prop.table(qst_resp)[index] * 100,
digits = 2),"%.\n \n", sep = "")
new_entry <- data.frame(i - 3, prop.table(table(dat[i]))[index])
names(new_entry) <- c("Question", "% Correct")
entries <- rbind(entries, new_entry)
}
# Individual Question Summary Visualization ----------------------------------
# Plots the percentages correct of every question as a barplot and a plot.
#
par(mfrow = c(1,2))
entries2 <- entries
entries2[2] <- round(entries[2] * 10) / 10
barplot(table(entries2), main = "Barplot of Question \n Correct Percentages",
space = 0, col = "lightblue", xlab = "% Correct",
ylab = "Question Count")
summary(unlist(entries[2]))
plot(unlist(entries[1]), unlist(entries[2]), xlab = "Question Number",
ylab = "% Correct", main = "Plot of Question \n Correct Percentages")
# Closing files --------------------------------------------------------------
# Closes the files and saves with the inputted sinked txt and the plots in the
# pdf.
#
dev.off()
sink()
}
test_analysis(dat_natl, dat_numbers_natl, "pt")
# Chapter Analysis -------------------------------------------------------------
# Splits up the national test into the different chapter entries and analyzes
# those students to make a txt and pdf file document for chapters.
# Prereq: Table with
dat_numbers2 <- dat_numbers_natl
dat_numbers2[, 1] <- round(dat_numbers_natl[, 1] / 10000000)
chapters <- unique(dat_numbers2[, 1])
indices <- numeric(length(chapters) + 1)
# Find first index of the given chapters
for (i in 1:length(chapters)) {
indices[i] <- which(dat_numbers2[, 1] == chapters[i])
}
indices[i + 1] <- students  # last index from the national (covers all chapters)
for (i in 1:(length(indices) - 1)) {
if (i != length(indices) - 1) {
new_numbers <- dat_numbers2[indices[i]:(indices[i + 1] - 1) ,]
new_letters <- dat_natl[indices[i]:(indices[i + 1] - 1) ,]
} else {
new_numbers <- dat_numbers2[indices[i]:indices[i + 1] ,]
new_letters <- dat_natl[indices[i]:indices[i + 1] ,]
}
doan <- chapters[i]
test_analysis(new_letters, new_numbers, doan)
}
dat_numbers2
dat_numbers2[, 1]
numeric(140)
holder <- numeric(140)
dat_numbers2[1 ,]
holder[1]
holder[1 ,]
holder[1] <- dat_numbers2[1 ,]
holder
dim(dat_numbers2)
holder <- numeric(115, 43)
holder <- matrix(115, 43)
holder[1 ,]
holder
holder <- matrix(nrow = 115, ncol = 43)
holder
holder[1 ,]
holder[1] <- dat_numbers2[1 ,]
holder[1 ,] <- dat_numbers2[1 ,]
holder
lien_doan <- c("Thanh Phaolo Hanh", "Joan of Arc", "Saint Benedict",
"Thanh Gia", "John Paul II", "Thanh Gia", "Ignatius Loyola",
"Nguon Song", "Ra Khoi", "San Diego", "Sinai", "John Paul II",
"Daminh Savio", "Joan of Arc")
ld_interval <- c(15, 14, 21, 5, 1, 6, 11, 14, 12, 4, 7, 9, 19, 10, 1)
counter <- 1
max <- 140
for (i in 1:length(ld_interval)) {
}
length(ld_interval)
dat_numbers2
range <- c(1, ld_interval[1])
print(i)
for (i in 1:length(ld_interval)) {
print(i)
}
dat_numbers2[dat_numbers2$Student_ID >= 0 && dat_numbers2$Student_ID < 100]
dat_numbers2[dat_numbers2$Student_ID >= 0 && dat_numbers2$Student_ID < 45]
write.table(dat_numbers2)
write.table(dat_numbers2)[Student_ID >= 2 && Student_ID < 31]
holder <- write.table(dat_numbers2)[Student_ID >= 2 && Student_ID < 31]
holder <- write.table(dat_numbers2)
holder$Student_ID
holder[, 1]
holder[1 ,]
holder
holder <- write.table(dat_numbers2)
holder
holder <- rbindlist(dat_numbers2)
do.call("rbind", dat_numbers2)
do.call("rbind", dat_numbers2)
do.call("rbind", dat_numbers2)[, 1]
do.call("rbind", dat_numbers2)[Student_ID == 2]
chapters
typeof(chapters)
typeof(chapters[1]
chapters[1]
chapters[2]
index(chapters)
(which chapters > 3)
which(chapters > 3)
chapters
which(chapters > 3 | chapters < 6)
which(chapters > 3 & chapters < 6)
which(chapters > 3 & chapters < 32)
ld_endpt <- c(15, 29, 50, 55, 56, 62, 73, 87, 99, 103, 110, 129, 139, 140)
length(ld_endpt)
lenght(lien_doan)
length(lien_doan)
for (i in 1:length(ld_interval)) {
which(chapters > ld_enpt[1] & chapters < ld_endpt[2])
}
ld_endpt <- c(15, 29, 50, 55, 56, 62, 73, 87, 99, 103, 110, 129, 139, 140)
length(ld_interval)
range <- c(1, ld_interval[1])
for (i in 1:length(ld_interval)) {
which(chapters > ld_enpt[1] & chapters < ld_endpt[2])
}
ld_endpt
ld_endpt[1]
ld_endpt[2]
which(chapters > ld_endpt[1])
which(chapters > ld_endpt[1] & chapters < ld_endpt[2])
chapters
range <- c(1, ld_endpt[1])
for (i in 1:length(ld_interval) - 1) {
which(chapters > range[1] & chapters < range[2])
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
print(which(chapters > range[1] & chapters < range[2]))
for (i in 1:length(ld_interval) - 1) {
print(which(chapters > range[1] & chapters < range[2]))
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
ld_endpt[1]
range[1]
range[1] <- ld_endpt[i]
ld_endpt[1]
toint(ld_endpt[1])
typeof(ld_endpt[1])
typeof(range[1])
ld_endpt[2]
which(chapters > ld_endpt[1] & chapters < ld_endpt[2])
num <- which(chapters > range[1] & chapters < range[2]))
num <- which(chapters > range[1] & chapters < range[2])
num
range
range[1] <- ld_endpt[i]
ld_endpt <- c(15, 29, 50, 55, 56, 62, 73, 87, 99, 103, 110, 129, 139, 140)
range[1] <- ld_endpt[i]
range[1] <- ld_endpt[1]
i
for (i in 1:(length(ld_interval) - 1)) {
num <- which(chapters > range[1] & chapters < range[2])
range
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
for (i in 1:(length(ld_interval) - 1)) {
num <- which(chapters > range[1] & chapters < range[2])
print(range)
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
for (i in 1:(length(ld_interval) - 1)) {
num <- which(chapters > range[1] & chapters < range[2])
print(num)
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
range <- c(1, ld_endpt[1])
for (i in 1:(length(ld_interval) - 1)) {
num <- which(chapters > range[1] & chapters < range[2])
print(num)
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
integer(0)
length(integer(0))
indices[i + 1] <- students  # last index from the national (covers all chapters)
indices
for (i in 1:(length(ld_interval) - 1)) {
num <- which(chapters > range[1] & chapters < range[2])
if (length(num) == 1) {
new_numbers <- dat_numbers2[indices[num]:(indices[num + 1] - 1) ,]
new_letters <- dat_natl[indices[num]:(indices[num + 1] - 1) ,]
} else if (length(num) > 1) {
for (j in num) {
# combine 2+ chapters into one table for analysis
}
}
print(num)
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
for (i in 1:(length(ld_interval) - 1)) {
num <- which(chapters > range[1] & chapters < range[2])
if (length(num) == 1) {
new_numbers <- dat_numbers2[indices[num]:(indices[num + 1] - 1) ,]
new_letters <- dat_natl[indices[num]:(indices[num + 1] - 1) ,]
ld_name <- lien_doan[num]
test_analysis(new_letters, new_numbers, ld_name)
} else if (length(num) > 1) {
for (j in num) {
# combine 2+ chapters into one table for analysis
}
}
print(num)
range[1] <- ld_endpt[i]
range[2] <- ld_endpt[i + 1]
}
