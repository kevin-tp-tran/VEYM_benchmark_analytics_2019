plot(x, y_1, cex = 0.5)
plot(x, y_2, cex = 0.5)
plot(x, y_3, cex = 0.5)
plot(x, y_4, cex = 0.5)
# 3.2 Correlation
cor(x, y_1)
cor(x, y_2)
cor(x, y_3)
# Adding one outlier can artifically reduce r and clusters can make r meaningless
set.seed(123)
x <- runif(100, 0, 1)
error <- rnorm(100, 0, 0.5)
y <- 1 + 2 * x + error
x_1 <- rnorm(100, 0, 50)
y_1 <- rnorm(100, 0, 50)
x_2 <- 1000 + rnorm(100, 0, 50)
y_2 <- 1000 + rnorm(100, 0, 50)
plot(x, y, main = 'Without Outliers', cex = 0.5)
cor(x, y)
x[101] <- 0.2
y[101] <- 8.0
plot(x, y, main = 'With Outlier (0.2, 8.0)', cex = 0.5)
cor(x, y)
plot(x_1, y_1, main = 'Cluster 1', cex = 0.5)
cor(x_1, y_1)  # No correlation between x and y in cluster 1
x <- c(x_1, x_2)
y <- c(y_1, y_2)
plot(x, y, main = 'Combined Clusters', cex = 0.5)
cor(x, y)
# 3.3 OLS Regression on Simulated Data
rm(list = ls(all = TRUE))
# 3.3 OLS Regression on Simulated Data
rm(list = ls(all = TRUE))
set.seed(123)  # reproducable results
x <- runif(100, 0, 1)
x <- runif(100, 0, 1)
error <- rnorm(100, 0, 1)
y <- 10 + 2 * x + error
plot(x, y)
cor(x, y)
set.seed(123)  # reproducable results
x <- runif(100, 0, 1)
error <- rnorm(100, 0, 1)
y <- 10 + 2 * x + error
plot(x, y)
cor(x, y)
model.1 <- lm(y ~ x)  # Fitting the regression
model.1  # estimated coefficients are pretty close to the true ones
abline(model.1)
names(model.1)
model.1$coefficients
# 3.4 OLS Regression on "Real" Data
x <- c(72, 70, 65, 68, 70)
y <- c(200, 180, 120, 118, 190)
plot(x, y, cex = 0.5)
cor(x, y)
model.1 <- lm(y ~ x)
abline(model.1)
model.1
summary(model.1)
# Example: Regression on Hail Data
dat <- read.table("https://www.stat.washington.edu/marzban/390/summer19/hail_dat.txt", header = T)
plot(dat)
cor(dat)
diverg <- dat[, 1]
rotate <- dat[, 2]
model.1 <- lm(size ~ diverg)  # Regression of size and divergence
plot(diverg, size)
abline(model.1)
size <- dat[, 3]
rotate <- dat[, 2]
diverg <- dat[, 1]
model.1 <- lm(size ~ diverg)  # Regression of size and divergence
plot(diverg, size)
abline(model.1)
model.2 <- lm(size ~ rotate)  # Regression on size and rotation
plot(rotate, size)
abline(model.2)
# Decomposing SST into SS_explained and SS_unexplained
anova(model.1)
summary(model.1)
# b) Write code to find the number of rows and cols in dat_a.
dim(dat_a)
dat_a = read.table("https://www.stat.washington.edu/marzban/390/summer19/gamma_dat.txt",header=F)
# b) Write code to find the number of rows and cols in dat_a.
dim(dat_a)
# or
nrow(dat_a)
ncol(dat_a)
dat_b = c(6.1,5.8,7.8,7.1,7.2,9.2,6.6,8.3,10.0,7.0,8.3,7.8,8.1,7.4,8.5,8.9,9.8,
9.7,14.1,12.6,11.2,10.1)
x = faithful$eruptions
y = faithful$waiting
# or
x = faithful[,1]
y = faithful[,2]
hist(x, breaks=20)
hist(y, breaks=20)
y = rbinom(1000, 20, 0.3)
h = hist(y, breaks = 20)
h$counts = h$counts / sum(h$counts)
plot(h)
x = c(0:15)  # I picked this based on what I saw in the histogram;
lines(x, dbinom(x, 20, 0.3))
quantile(y, probs = c(0.1, 0.9))    # 3 9
qbinom(c(0.1, 0.9), 20, 0.3)        # 3 9
dat = read.table("temp_dat_rev.txt", header=T)
dat = read.table("https://www.stat.washington.edu/marzban/390/summer19/temp_dat_rev.txt", header=T)
boxplot(dat)
quantile(dat[,1])
# h) The function t() takes the transpose of a table, i.e., it makes a new table
# with the rows and columns switched. Write code to make comparative boxplots
# for comparing the temperatures across the 12 months in a year.
boxplot(t(dat))
quantile(dat[,1], probs = c(0.1, 0.9) )    # 32.11 65.14
quantile(dat[,2], probs = c(0.1, 0.9) )    # 33.19 64.91
quantile(dat[,3], probs = c(0.1, 0.9) )    # 45.44 74.16
# Text File entry --------------------------------------------------------------
# Requires three text files: answers, answers of students per question, and
# scores of students per question. The data files for the student's answers and
# scores must start in column 4.
# C:\\Users\\kevint24\\Documents\\Project\\VEYM_benchmark_analytics_2019\\Data\\TN\\TN.C3.letters.txt
# C:\\Users\\kevint24\\Documents\\Project\\VEYM_benchmark_analytics_2019\\Data\\TN\\TN.C3.numbers.txt
# C:\\Users\\kevint24\\Documents\\Project\\VEYM_benchmark_analytics_2019\\Data\\TN\\TN.C3.answers.txt
#
letters_entry <- readline(prompt = "Letter responses input path for test: ")
numbers_entry <- readline(prompt = "Question scores input path for test: ")
answers_entry <- readline(prompt = "Answers input path for test: ")
# Section  entries -------------------------------------------------------------
# Prompts the user to input the amount of sections, the section overview, and
# the amount of questions per section. The user must input this data
# chronologically.
#
section_names <- c()
section_count <- c()
sections <- as.numeric(readline("Number of sections in this test: "))
sections <- as.numeric(readline("Number of sections in this test: "))
name <- readline(prompt = "Class name and division for test: ")
for (i in 1:sections) {
category_name <- readline("Section name: ")
category_count <- readline("Questions pertaining to this category: ")
section_names <- append(category_name, section_names)
section_count <- append(as.numeric(category_count), section_count)
}
section_names <- rev(section_names)
section_count <- rev(section_count)
# Initializing text files ------------------------------------------------------
# Takes the inputted text files and initializes them as objects.
#
dat <- read.table(letters_entry, header = T, fill = TRUE)
dat_numbers <- read.table(numbers_entry, header = T, fill = TRUE)
answers <- read.table(answers_entry, header = T, fill = TRUE)
questions <- ncol(answers)
students <- nrow(dat)
names(dat)
numeric(100, 2)
numeric(100)
numeric(students)
dat$Student_ID
dat$Grade
numeric(students)
hold <- numeric(5)
h1 <- numeric(students)
hold[1] <- h1
dim(sections)
sections
matrix(0L, nrow = sections, ncol = students)
matrix(0L, nrow = students, ncol = sections)
category_scores <- matrix(0L, nrow = students, ncol = sections)
category_scores
category_scores[1][2]
category_scores[1, 2]
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
section_scores <- c()
for (i in 1:students) {
section_scores <- append(sum(dat_numbers[i, range[1]:range[2]]),
section_scores)
category_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
category_scores
plot(category_scores)
# Example: Regression on Hail Data
dat <- read.table("https://www.stat.washington.edu/marzban/390/summer19/hail_dat.txt", header = T)
dat
plot(dat)
cor(dat)
library(reshape2)
m <- matrix(nrow = 4)
m
dimnames(m) <- list( One=letters[1:4], Two = LETTERS[1:3])
as.data.frame(as.table.m)
as.data.frame(as.table(m)
as.data.frame(as.table(m)
)
as.data.frame(as.table(m))
m <- matrix(nrow = 4)
m
as.data.frame(as.table(m))
m <- matrix(nrow = students)
m
as.data.frame(as.table(m))
m <- matrix(nrow = students)
as.table(m)
as.data.frame(as.table(m))
m <- as.data.frame(as.table(m))
m[, 1]
m[1][2]
m[1, 2]
?as.data.frame()
m <- matrix(nrow = students)
m <- as.data.frame(as.table(m), col.names = section_names)
m
m <- matrix(nrow = students)
m <- as.data.frame(as.table(m), row.names = section_names)
# Initializing text files ------------------------------------------------------
# Takes the inputted text files and initializes them as objects.
#
dat <- read.table(letters_entry, header = T, fill = TRUE)
m <- as.data.frame(as.table(m), row.names = dat$Student_ID)
m
m <- matrix(nrow = students, ncol = sections)
m <- as.data.frame(as.table(m), row.names = dat$Student_ID)
m
m <- matrix(nrow = students, ncol = sections)
m <- as.data.frame(as.table(m), row.names = dat$Student_ID)
dim(m)
length(dat$Student_ID)
m <- as.data.frame(as.table(m), row.names = dat$Student_ID)
m <- matrix(nrow = students, ncol = sections)
m <- as.data.frame(as.table(m))
m
m <- matrix(nrow = students, ncol = sections)
dim(m)
m <- as.data.frame(as.table(m))
m
as.table(m)
m <- matrix(nrow = students, ncol = sections)
as.table(m)
m <- matrix(nrow = students, ncol = sections)
colnames(smoke) <- section_names
colnames(m) <- section_names
rownames(m) <- dat$Student_ID
m <- as.table(m)
m <- as.data.frame(as.table(m))
m <- matrix(nrow = students, ncol = sections)
colnames(m) <- section_names
rownames(m) <- dat$Student_ID
m <- as.table(m)
m
dim(m)
section_scores <- matrix(nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
m <- as.table(section_scores)
as.table(section_scores)
dim(section_scores)
for (j in 1:sections) {
section_scores <- c()
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
section_scores <- c()
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
section_scores <- matrix(nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
dim(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
section_scores <- c()
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
section[25, 2]
section_scores[25, 2]
section_scores[1][1]
section_scores[1,0]
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
dim(section_scores)
section_scores
section_scores[1,0]
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
section_scores <- c()
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
section_scores
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
dim(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
section_scores
plot(section_scores)
par(mfrow = c(1,1))
plot(section_scores)
cor(section_scores)
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- 1:6
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
dim(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
section_scores
plot(section_scores)
cor(section_scores)
plot(section_scores[, 1], section_scores[, 2])
cor(section_scores)
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
hist(section_scores[, j], col = c("#009999"), main =
paste("Histogram of", section_names[j], sep = " "),
xlab = paste("Scores of", section_names[j], sep = " "))
boxplot(section_scores[, j], main =
paste("Boxplot of", section_names[j], sep = " "))
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
par(mfrow = c(3,2))
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
hist(section_scores[, j], col = c("#009999"), main =
paste("Histogram of", section_names[j], sep = " "),
xlab = paste("Scores of", section_names[j], sep = " "))
boxplot(section_scores[, j], main =
paste("Boxplot of", section_names[j], sep = " "))
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
par(mfrow = c(1,1))
plot(section_scores[, 1], section_scores[, 2])
boxplot(section_scores)
boxplot(section_scores[, 1], section_scores[, 2])
boxplot(section_scores[, 1], section_scores[, 2], section_scores[, 3])
cor(section_scores)
par(mfrow = c(3,2))
section_scores <- matrix(0L, nrow = students, ncol = sections)
colnames(section_scores) <- section_names
rownames(section_scores) <- dat$Student_ID
section_scores <- as.table(section_scores)
n.trials <- seq(from = 4, to = questions + 3, by = 1)
range <- c(4, 4+section_count[1]-1)
for (j in 1:sections) {
for (i in 1:students) {
section_scores[i, j] <- sum(dat_numbers[i, range[1]:range[2]])
}
hist(section_scores[, j], col = c("#009999"), main =
paste("Histogram of", section_names[j], sep = " "),
xlab = paste("Scores of", section_names[j], sep = " "))
boxplot(section_scores[, j], main =
paste("Boxplot of", section_names[j], sep = " "))
range[1] <- range[1] + section_count[j]
range[2] <- range[2] + section_count[j+1]
}
?pdf
capture.output(cor(section_scores))
# Saving plots in pdf ----------------------------------------------------------
# Sets the name and destination of the file for all data visualization plots.
# C:\\Users\\kevint24\\Documents\\Project\\VEYM_benchmark_analytics_2019\\Visualization
#
setwd(readline("What is the output path of your file? "))
pdf(readline("What is the name of your pdf? "))
capture.output(cor(section_scores))
# Closing pdf ------------------------------------------------------------------
# Closes the pdf and saves the pdf with the inputted data plots.
#
dev.off()
save(cor(section_scores))
s1 <- cor(section_scores)
save(s1)
library(grid)
library(gridExtra)
# Example: Regression on Hail Data
dat <- read.table("https://www.stat.washington.edu/marzban/390/summer19/hail_dat.txt", header = T)
dat
plot(dat)
heatplot(section_scores)
hplot(section_scores)
heatmap(section_scores)
plot(section_scores)
heatmap(section_scores)
# heatmap(section_scores)
# plot(section_scores)
cor(section_scores)
plot(section_scores[, 1], section_scores[, 2])
model.1 <- lm(y ~ x)
y <- section_scores[, 1]
x <- section_scores[, 2]
model.1 <- lm(y ~ x)
abline(model.1)
summary(model.1)
# Overall Test Statistics ------------------------------------------------------
# Creates a histogram and boxplot of the overall test in addition to
# identifying the 5-number summary.
#
par(mfrow = c(1,2))
summ <- as.numeric(unlist(dat[3])) / questions
hist(summ, main = paste("Histogram of", name, sep = " "), xlab = "Percentages")
abline(v = mean(summ),col = "#FF0000")
# Initializing text files ------------------------------------------------------
# Takes the inputted text files and initializes them as objects.
#
dat <- read.table(letters_entry, header = T, fill = TRUE)
dat_numbers <- read.table(numbers_entry, header = T, fill = TRUE)
answers <- read.table(answers_entry, header = T, fill = TRUE)
questions <- ncol(answers)
students <- nrow(dat)
# Overall Test Statistics ------------------------------------------------------
# Creates a histogram and boxplot of the overall test in addition to
# identifying the 5-number summary.
#
par(mfrow = c(1,2))
summ <- as.numeric(unlist(dat[3])) / questions
hist(summ, main = paste("Histogram of", name, sep = " "), xlab = "Percentages")
abline(v = mean(summ),col = "#FF0000")
statist = c(summary(summ), sd(summ))
print(statist)
boxplot(summ, main = paste("Boxplot of the scores for", name, sep = " "))
qqnorm(summ)
abline(0, 1)
qqnorm(summ, cex = 0.5)
Q <- qnorm(X, mean = 0, sd = 1)
qqmath(summ, dist = qexp, cex = 0.5)
qqmath(summ, dist = qnorm, cex = 0.5)
sd(summ)
abline(mean(summ), sd(summ))
abline(sd(summ), mean(summ))
qqmath(summ, dist = qnorm, cex = 0.5)
abline(sd(summ), mean(summ))
model.1 <- lm()
# Overall Test Statistics ------------------------------------------------------
# Creates a histogram and boxplot of the overall test in addition to
# identifying the 5-number summary.
#
par(mfrow = c(1,2))
summ <- as.numeric(unlist(dat[3])) / questions
hist(summ, main = paste("Histogram of", name, sep = " "), xlab = "Percentages")
abline(v = mean(summ),col = "#FF0000")
statist = c(summary(summ), sd(summ))
print(statist)
boxplot(summ, main = paste("Boxplot of the scores for", name, sep = " "))
qqmath(summ, dist = qnorm, cex = 0.5)
abline(sd(summ), mean(summ))
qqnorm(summ, cex = 0.5)
abline(sd(summ), mean(summ))
abline(mean(summ), sd(summ))
qqnorm(summ, cex = 0.5)
abline(mean(summ), sd(summ))
mean(summ)
sd(summ)
source('~/Project/VEYM_benchmark_analytics_2019/code/veym_test_2019.R', echo=TRUE)
